{"version":3,"sources":["matter/RenderClones.module.scss","app/App.module.scss","globals.js","matter/Render.module.scss","features/words/letters.svg","features/words/Letter.module.scss","matter/Engine.js","matter/Render.js","matter/RenderClones.js","matter/hooks.js","matter/bodies/Body.js","matter/util.js","matter/bodies/Rectangle.js","matter/bodies/Circle.js","matter/bodies/Vertices.js","matter/Constraint.js","matter/extra/Shape.js","matter/extra/Walls.js","util.js","SpriteMap.js","features/words/hooks.js","features/words/Letter.js","app/Game.js","app/App.js","index.js"],"names":["module","exports","window","decomp","require","EngineContext","createContext","Provider","useEngine","useContext","React","memo","options","children","useState","engine","setEngine","useEffect","Matter","Engine","create","clear","enabled","value","enableMouse","mouseConstraintOptions","props","elementRef","useRef","render","Render","element","current","run","runner","Runner","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","constraint","World","add","world","console","log","stop","ref","className","styles","margin","width","height","Set","bodies","_bodies","domClones","map","clone","el","filter","Boolean","svgClones","svg","rerender","Symbol","useRerender","useLayoutEffect","Events","on","object","remove","timestamp","body","isSleeping","position","x","y","style","transform","angle","viewBox","setBody","randomSuffix","Math","round","random","toString","Bodies","rectangle","createRef","key","id","radius","circle","cx","cy","r","px","n","vertexSets","flagInternal","cloneID","cloneProps","fromVertices","bounds","min","max","_width","_height","scale","Body","scaledWidth","scaledHeight","xlinkHref","bodyA","setBodyA","bodyB","setBodyB","Constraint","cloneElement","paths","sampleLength","hull","path","Svg","pathToVertices","wallWidth","isStatic","top","bottom","left","right","cESVG","name","document","createElementNS","SpriteContext","spriteMap","visibility","appendChild","docs","setMap","entries","doc","querySelectorAll","shape","getAttribute","removeAttribute","randomID","BBox","getBBox","symbol","setAttribute","flat","Map","removeChild","useLetter","get","letter","letterData","Letter","visible","letters","setLetters","fetch","letterPaths","then","response","a","parser","DOMParser","text","parseFromString","useLetterData","App","documentElement","clientWidth","clientHeight","sceneWidth","sceneHeight","RenderClones","background","wireframeBackground","stiffness","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.44f1f684.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"domClones\":\"RenderClones_domClones__NPar2\",\"svgClones\":\"RenderClones_svgClones__1XrVz\",\"container\":\"RenderClones_container__1PbRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__248Ek\"};","window.decomp = require(\"poly-decomp\");\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Render\":\"Render_Render__uHwLQ\"};","module.exports = __webpack_public_path__ + \"static/media/letters.a13ba14b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letter\":\"Letter_Letter__1mSSv\"};","import React, { useEffect, useState, createContext, useContext } from \"react\";\nimport Matter from \"matter-js\";\n\nexport const EngineContext = createContext();\nconst { Provider } = EngineContext;\n\nexport const useEngine = () => useContext(EngineContext);\n\nconst Engine = ({ options, children }) => {\n  const [engine, setEngine] = useState();\n\n  useEffect(() => {\n    const engine = Matter.Engine.create(options);\n    setEngine(engine);\n\n    return () => {\n      Matter.Engine.clear(engine);\n      engine.enabled = false;\n    };\n  }, [options]);\n\n  return <Provider value={engine}>{children}</Provider>;\n};\n\nexport default React.memo(Engine);\n","import React, { useRef, useEffect } from \"react\";\nimport Matter from \"matter-js\";\nimport { useEngine } from \"./Engine\";\nimport styles from \"./Render.module.scss\";\n\nconst Render = ({\n  options = {},\n  enableMouse = false,\n  mouseConstraintOptions = {},\n  children,\n  ...props\n}) => {\n  const elementRef = useRef();\n  const engine = useEngine();\n\n  useEffect(() => {\n    if (!engine) {\n      return;\n    }\n\n    const render = Matter.Render.create({\n      element: elementRef.current,\n      engine,\n      options\n    });\n    Matter.Render.run(render);\n\n    const runner = Matter.Runner.create();\n    Matter.Runner.run(runner, engine);\n\n    if (enableMouse || mouseConstraintOptions) {\n      const mouse = Matter.Mouse.create(render.canvas);\n      render.mouse = mouse;\n\n      if (mouseConstraintOptions) {\n        const mouseConstraint = Matter.MouseConstraint.create(engine, {\n          mouse,\n          constraint: mouseConstraintOptions\n        });\n        Matter.World.add(engine.world, mouseConstraint);\n      }\n    }\n\n    console.log(render);\n\n    return () => {\n      Matter.Render.stop(render);\n      Matter.Runner.stop(runner);\n    };\n  }, [engine, options, mouseConstraintOptions, enableMouse]);\n\n  return (\n    <div {...props} ref={elementRef} className={styles.Render}>\n      {children}\n    </div>\n  );\n};\n\nexport default React.memo(Render);\n","import React, { useLayoutEffect, useState } from \"react\";\nimport Matter from \"matter-js\";\n// import { produce } from \"immer\";\nimport Render from \"./Render\";\nimport { useEngine } from \"./Engine\";\nimport styles from \"./RenderClones.module.scss\";\nimport { useRerender } from \"./hooks\";\n\nconst RenderDOM = ({ children, options, margin = 40, ...props }) => {\n  const engine = useEngine();\n  const { width, height } = options;\n  const [bodies] = useState(new Set());\n  const _bodies = [...bodies];\n  const domClones = _bodies.map(({ clone: { el } }) => el).filter(Boolean);\n  const svgClones = _bodies.map(({ clone: { svg } }) => svg).filter(Boolean);\n  const rerender = useRerender();\n\n  useLayoutEffect(() => {\n    if (!engine) {\n      return;\n    }\n\n    Matter.Events.on(engine.world, \"afterAdd\", ({ object }) => {\n      if (!object.clone) {\n        return;\n      }\n      bodies.add(object);\n      rerender();\n    });\n    Matter.Events.on(engine.world, \"afterRemove\", ({ object }) => {\n      if (!object.clone) {\n        return;\n      }\n      bodies.remove(object);\n      rerender();\n    });\n    Matter.Events.on(engine, \"afterUpdate\", ({ timestamp }) => {\n      for (const body of _bodies) {\n        if (body.isSleeping) {\n          return;\n        }\n\n        const { x, y } = body.position;\n        const clone = body.clone.ref.current;\n        // const { min, max } = body.bounds;\n        // clone.style.width = `${max.x - min.x + margin}px`;\n        // clone.style.height = `${max.y - min.y + margin}px`;\n\n        clone.style.transform = `translate(${x}px, ${y}px) rotate(${body.angle}rad)`;\n      }\n    });\n  }, [_bodies, bodies, engine, margin, rerender]);\n\n  return (\n    <Render {...props} options={options}>\n      <div className={styles.domClones}>{domClones}</div>\n      <svg viewBox={`0 0 ${width} ${height}`} className={styles.svgClones}>\n        {svgClones}\n      </svg>\n      {children}\n    </Render>\n  );\n};\n\nexport default React.memo(RenderDOM);\n","import { useState } from \"react\";\n\nexport const useRerender = () => {\n  const [, rerender] = useState();\n\n  return () => rerender(Symbol());\n};\n","import React, { useEffect } from \"react\";\nimport Matter from \"matter-js\";\nimport { useEngine } from \"../Engine\";\n\nconst Body = ({ create, clone, setBody = null } = {}) => {\n  const engine = useEngine();\n\n  useEffect(() => {\n    if (!engine) {\n      return;\n    }\n    const body = create();\n    if (setBody) {\n      setBody(body);\n    }\n\n    if (clone) {\n      body.clone = clone;\n    }\n\n    Matter.World.add(engine.world, body);\n\n    return () => {\n      Matter.World.remove(engine.world, body);\n      if (setBody) {\n        setBody(null);\n      }\n    };\n  }, [setBody, engine, create, clone]);\n\n  return null;\n};\n\nexport default React.memo(Body);\n","export const randomSuffix = Math.round(Math.random() * 1e10).toString(32);\n","import React, { createRef } from \"react\";\nimport Matter from \"matter-js\";\nimport Body from \"./Body\";\nimport { randomSuffix } from \"../util\";\n\nconst Rectangle = ({\n  x,\n  y,\n  width,\n  height,\n  clone = false,\n  options = {},\n  ...props\n} = {}) => {\n  const create = () => {\n    const body = Matter.Bodies.rectangle(x, y, width, height, options);\n    if (clone) {\n      const ref = createRef();\n      const svg = (\n        <rect\n          x={-width / 2}\n          y={-height / 2}\n          width={width}\n          height={height}\n          ref={ref}\n          key={`${body.id}__${randomSuffix}`}\n        />\n      );\n      body.clone = {\n        ref,\n        svg\n      };\n    }\n\n    return body;\n  };\n\n  return <Body create={create} {...props} />;\n};\n\nexport default React.memo(Rectangle);\n","import React, { createRef } from \"react\";\nimport Matter from \"matter-js\";\nimport Body from \"./Body\";\nimport { randomSuffix } from \"../util\";\n\nconst Circle = ({\n  x,\n  y,\n  radius,\n  clone = false,\n  options = {},\n  ...props\n} = {}) => {\n  const create = () => {\n    const body = Matter.Bodies.circle(x, y, radius, options);\n    if (clone) {\n      const ref = createRef();\n      const svg = (\n        <circle\n          cx={-radius / 2}\n          cy={-radius / 2}\n          r={radius}\n          ref={ref}\n          key={`${body.id}__${randomSuffix}`}\n        />\n      );\n      body.clone = {\n        ref,\n        svg\n      };\n    }\n\n    return body;\n  };\n\n  return <Body create={create} {...props} />;\n};\n\nexport default React.memo(Circle);\n","import React, { createRef } from \"react\";\nimport Matter from \"matter-js\";\nimport Body from \"./Body\";\n\nconst px = n => `${n}px`;\n\nconst Vertices = ({\n  x,\n  y,\n  width,\n  height,\n  vertexSets,\n  options = {},\n  flagInternal = false,\n  cloneID = null,\n  cloneProps = {},\n  setBody = null,\n  ...props\n} = {}) => {\n  const create = () => {\n    const body = Matter.Bodies.fromVertices(\n      x,\n      y,\n      vertexSets,\n      options,\n      flagInternal\n    );\n\n    if (setBody) {\n      console.log(1232);\n\n      setBody(body);\n    }\n\n    const ref = createRef();\n    const { min, max } = body.bounds;\n\n    const _width = max.x - min.x;\n    const _height = max.y - min.y;\n    const scale = Math.min(width / _width, height / _height);\n    Matter.Body.scale(body, scale, scale);\n    // const viewBox = parseViewbox(\n    //   document.querySelector(`#${cloneID}`).getAttribute(\"viewBox\")\n    // );\n\n    // XXX: why?\n    const ratio = 1.4;\n    const scaledWidth = _width * scale * ratio;\n    const scaledHeight = _height * scale * ratio;\n\n    const svg = (\n      <use\n        xlinkHref={`#${cloneID}`}\n        ref={ref}\n        width={px(scaledWidth)}\n        height={px(scaledHeight)}\n        key={cloneID}\n        x={px(-scaledWidth / 2)}\n        y={px(-scaledHeight / 2)}\n        {...cloneProps}\n      />\n    );\n    body.clone = {\n      svg,\n      ref\n    };\n\n    return body;\n  };\n\n  return <Body create={create} {...props} />;\n};\n\nexport default React.memo(Vertices);\n","import React, { useEffect, cloneElement, useState } from \"react\";\nimport Matter from \"matter-js\";\nimport { useEngine } from \"../matter\";\n\nconst Constraint = ({ children, ...options }) => {\n  const engine = useEngine();\n\n  const [bodyA, setBodyA] = useState();\n  const [bodyB, setBodyB] = useState();\n\n  useEffect(() => {\n    if (!engine) {\n      return;\n    }\n\n    if (!bodyA || !bodyB) {\n      return;\n    }\n\n    const constraint = Matter.Constraint.create({\n      bodyA,\n      bodyB,\n      options\n    });\n    Matter.World.add(engine.world, constraint);\n\n    return () => {\n      Matter.World.remove(engine.world, constraint);\n    };\n  }, [options, engine, bodyA, bodyB]);\n\n  return [setBodyA, setBodyB].map((setBody, key) =>\n    cloneElement(children[key], {\n      setBody,\n      key\n    })\n  );\n};\n\nexport default React.memo(Constraint);\n","import React from \"react\";\nimport Matter from \"matter-js\";\nimport Vertices from \"../bodies/Vertices\";\n\nconst Shape = ({ paths, sampleLength = 30, hull = true, ...props }) => {\n  if (!paths) {\n    return null;\n  }\n  const vertexSets = paths.map(path =>\n    Matter.Svg.pathToVertices(path, sampleLength)\n  );\n  return <Vertices vertexSets={vertexSets} {...props} />;\n};\n\nexport default React.memo(Shape);\n","import React from \"react\";\nimport Rectangle from \"../bodies/Rectangle\";\n\nconst Walls = ({ x, y, width, height, wallWidth = 100, options } = {}) => {\n  const props = {\n    options: {\n      ...options,\n      isStatic: true\n    }\n  };\n\n  const top = {\n    ...props,\n    x: x + width / 2,\n    y: y + wallWidth / 2,\n    width: width,\n    height: wallWidth\n  };\n  const bottom = {\n    ...props,\n    ...top,\n    y: height - wallWidth / 2\n  };\n  const left = {\n    ...props,\n    x: x + wallWidth / 2,\n    y: y + height / 2,\n    height: height + wallWidth * 2,\n    width: wallWidth\n  };\n  const right = {\n    ...props,\n    ...left,\n    x: width - wallWidth / 2\n  };\n\n  return (\n    <>\n      <Rectangle {...top} />\n      <Rectangle {...bottom} />\n      <Rectangle {...left} />\n      <Rectangle {...right} />\n    </>\n  );\n};\n\nexport default React.memo(Walls);\n","export const randomSuffix = Math.round(Math.random() * 1e10).toString(32);\n\nexport const cESVG = name =>\n  document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n\nexport const parseViewbox = viewbox => {\n  const [x, y, width, height] = viewbox\n    .trim()\n    .split(/\\s+/)\n    .map(Number);\n  return { x, y, width, height };\n};\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { cESVG, randomSuffix } from \"./util\";\n\nexport const SpriteContext = createContext();\nconst { Provider } = SpriteContext;\n\nexport const useSprites = () => useContext(SpriteContext);\n\nconst spriteMap = cESVG(\"svg\");\nspriteMap.style.visibility = \"hidden\";\nspriteMap.style.position = \"absolute\";\ndocument.body.appendChild(spriteMap);\n\nconst SpriteMap = ({ docs, margin = 40, children }) => {\n  const [map, setMap] = useState();\n\n  useEffect(() => {\n    if (!docs || map) {\n      return;\n    }\n\n    const entries = docs\n      .map(doc =>\n        [...doc.querySelectorAll(\"[id]\")].map(shape => {\n          const id = shape.getAttribute(\"id\");\n          shape.removeAttribute(\"id\");\n          spriteMap.appendChild(shape);\n          const randomID = `sprite__${id}__${randomSuffix}`;\n\n          spriteMap.appendChild(shape);\n\n          var BBox = shape.getBBox();\n\n          const symbol = cESVG(\"symbol\");\n          symbol.setAttribute(\"id\", randomID);\n          symbol.appendChild(shape);\n          const viewBox = `\n            ${BBox.x - margin}\n            ${BBox.y - margin}\n            ${BBox.width + margin * 2}\n            ${BBox.height + margin * 2}\n          `;\n          symbol.setAttribute(\"viewBox\", viewBox);\n          spriteMap.appendChild(symbol);\n\n          return [id, { id: randomID, shape, symbol }];\n        })\n      )\n      .flat();\n    setMap(new Map(entries));\n\n    return () => {\n      if (map) {\n        for (const [id, { symbol }] of map.entries()) {\n          spriteMap.removeChild(symbol);\n          map.remove(id);\n        }\n      }\n    };\n  }, [docs, map, margin]);\n\n  return <Provider value={map}>{children}</Provider>;\n};\n\nexport default React.memo(SpriteMap);\n","import { useEffect, useState } from \"react\";\nimport letterPaths from \"./letters.svg\";\n// import styles from \"./Letter.module.scss\";\nimport { randomSuffix } from \"../../util\";\nimport { useSprites } from \"../../SpriteMap\";\n\nexport const suffixID = id => `${id}__${randomSuffix}`;\n\nexport const useLetterData = () => {\n  const [letters, setLetters] = useState();\n\n  useEffect(\n    () =>\n      void fetch(letterPaths).then(async response => {\n        const parser = new DOMParser();\n        const svg = parser.parseFromString(\n          await response.text(),\n          \"image/svg+xml\"\n        );\n        for (const path of svg.querySelectorAll(\"[id]\")) {\n          path.removeAttribute(\"style\");\n        }\n        setLetters([svg]);\n      }),\n    []\n  );\n\n  return letters;\n};\n\nexport const useLetter = key => {\n  const map = useSprites();\n\n  return !map ? null : map.get(key);\n};\n","import React from \"react\";\nimport { useLetter } from \"./hooks\";\nimport Shape from \"../../matter/extra/Shape\";\nimport styles from \"./Letter.module.scss\";\n\nconst Letter = ({ letter, ...props }) => {\n  const letterData = useLetter(letter);\n\n  if (!letterData) {\n    return null;\n  }\n  const { id, shape } = letterData;\n\n  return (\n    <Shape\n      paths={[shape]}\n      cloneID={id}\n      cloneProps={{\n        className: styles.Letter\n      }}\n      options={{\n        render: {\n          visible: false\n        }\n      }}\n      {...props}\n    />\n  );\n};\n\nexport default React.memo(Letter);\n","import React from \"react\";\nimport Letter from \"../features/words/Letter\";\nimport { useLetterData } from \"../features/words/hooks\";\nimport SpriteMap from \"../SpriteMap\";\nimport { Rectangle, Circle, Constraint } from \"../matter\";\n\nconst Game = () => {\n  const letters = useLetterData();\n  return (\n    <>\n      <SpriteMap docs={letters}>\n        <Letter letter=\"a\" x={100} y={250} width={100} height={100} />\n        <Letter letter=\"b\" x={200} y={250} width={100} height={100} />\n        <Letter letter=\"c\" x={300} y={250} width={100} height={100} />\n        <Letter letter=\"d\" x={400} y={250} width={100} height={100} />\n        <Constraint>\n          <Letter letter=\"e\" x={500} y={250} width={100} height={100} />\n\n          <Circle\n            x={600}\n            y={250}\n            radius={50}\n            options={\n              {\n                // isSensor: true\n                // isStatic: true\n              }\n            }\n          />\n        </Constraint>\n      </SpriteMap>\n      <Rectangle\n        x={500}\n        y={350}\n        width={1000}\n        height={100}\n        options={{ isStatic: true }}\n      />\n    </>\n  );\n};\n\nexport default React.memo(Game);\n","//@ts-check\n\nimport React, { useState } from \"react\";\nimport { Engine, Walls, RenderClones } from \"../matter\";\nimport styles from \"./App.module.scss\";\nimport Game from \"./Game\";\n\nconst App = () => {\n  const { clientWidth, clientHeight } = document.documentElement;\n  const [[sceneWidth, sceneHeight], setSceneSize] = useState([\n    clientWidth,\n    clientHeight\n  ]);\n  const wallWidth = 100;\n\n  return (\n    <Engine options={{}}>\n      <div className={styles.App}>\n        <RenderClones\n          className={styles.Render}\n          options={{\n            width: sceneWidth,\n            height: sceneHeight,\n            background: \"transparent\",\n            wireframeBackground: \"transparent\"\n          }}\n          mouseConstraintOptions={{\n            stiffness: 0.25,\n            render: {\n              visible: true\n            }\n          }}\n        >\n          <Walls\n            x={-wallWidth}\n            y={-wallWidth}\n            width={sceneWidth + wallWidth}\n            height={sceneHeight + wallWidth}\n            wallWidth={100}\n            options={{\n              render: {\n                visible: false\n              }\n            }}\n          />\n          <Game />\n        </RenderClones>\n      </div>\n    </Engine>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { configureStore } from \"@reduxjs/toolkit\";\nimport \"./globals\";\n\nimport \"./index.scss\";\nimport \"./globals\";\nimport \"pathseg\";\nimport App from \"./app/App\";\n// import rootReducer from \"./reducers\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}